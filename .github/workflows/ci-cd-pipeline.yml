name: .NET Core CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # .NET SDK'yi kur
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'

    # Backend Projesini İnşa Et
    - name: Build Backend
      run: dotnet build project2-3-tier-application/api/Basic3TierAPI/Basic3TierAPI.csproj

    # Testleri Çalıştır
    - name: Test Backend
      run: dotnet test project2-3-tier-application/api/Tests/Basic3TierAPI.Tests/Basic3TierAPI.Tests.csproj

  dockerize:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2

    # Docker imajını oluştur ve Docker Hub'a yükle
    - name: Build and push Backend Docker image
      run: |
        docker build -t buraksefil17/3-tier-backend:latest project2-3-tier-application/api/
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
        docker push buraksefil17/3-tier-backend:latest

    # Frontend için Node.js ve npm kur
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    # Frontend Projesini İnşa Et
    - name: Build Frontend
      run: |
        cd project2-3-tier-application.UI
        npm install
        npm run build

    # Frontend için Docker imajı oluştur ve Docker Hub'a yükle
    - name: Build and push Frontend Docker image
      run: |
        docker build -t buraksefil17/3-tier-frontend:latest project2-3-tier-application/ui/
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
        docker push buraksefil17/3-tier-frontend:latest